{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d4d8995-da37-4615-9a67-1737d307a0a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://www.kaggle.com/datasets/aiaiaidavid/the-big-dataset-of-ultra-marathon-running/discussion/420633"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "011ed33c-347a-491c-9eff-77f7a98043d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "19541e01-baf8-4e0d-9d10-03249e00103a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ce978c0d-6639-434a-8b01-958e5adad2a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "32ab1f99-da4b-478c-a9c9-e56a294fd261",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\2350612576.py:1: DtypeWarning: Columns (11) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(\"TWO_CENTURIES_OF_UM_RACES.csv\")\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"TWO_CENTURIES_OF_UM_RACES.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed85514e-5cba-4506-89e2-fa0bfdf7b946",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>4:51:39 h</td>\n",
       "      <td>Tnfrc</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1978.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>10.286</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:15:45 h</td>\n",
       "      <td>Roberto Echeverría</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>9.501</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:16:44 h</td>\n",
       "      <td>Puro Trail Osorno</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>9.472</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:34:13 h</td>\n",
       "      <td>Columbia</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>8.976</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:54:14 h</td>\n",
       "      <td>Baguales Trail</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.469</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:25:01 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>7.792</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:28:00 h</td>\n",
       "      <td>Los Patagones</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>7.732</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:32:24 h</td>\n",
       "      <td>Reaktiva Chile</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1967.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>7.645</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:39:08 h</td>\n",
       "      <td>Puro Trail Osorno</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>7.516</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:45:11 h</td>\n",
       "      <td>Marlene Flores Team</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>7.404</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year of event Event dates           Event name Event distance/length  \\\n",
       "0           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "1           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "2           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "3           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "4           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "5           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "6           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "7           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "8           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "9           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "\n",
       "   Event number of finishers Athlete performance         Athlete club  \\\n",
       "0                         22           4:51:39 h                Tnfrc   \n",
       "1                         22           5:15:45 h   Roberto Echeverría   \n",
       "2                         22           5:16:44 h    Puro Trail Osorno   \n",
       "3                         22           5:34:13 h             Columbia   \n",
       "4                         22           5:54:14 h       Baguales Trail   \n",
       "5                         22           6:25:01 h                  NaN   \n",
       "6                         22           6:28:00 h        Los Patagones   \n",
       "7                         22           6:32:24 h       Reaktiva Chile   \n",
       "8                         22           6:39:08 h    Puro Trail Osorno   \n",
       "9                         22           6:45:11 h  Marlene Flores Team   \n",
       "\n",
       "  Athlete country  Athlete year of birth Athlete gender Athlete age category  \\\n",
       "0             CHI                 1978.0              M                  M35   \n",
       "1             CHI                 1981.0              M                  M35   \n",
       "2             CHI                 1987.0              M                  M23   \n",
       "3             ARG                 1976.0              M                  M40   \n",
       "4             CHI                 1992.0              M                  M23   \n",
       "5             ARG                 1974.0              M                  M40   \n",
       "6             ARG                 1979.0              F                  W35   \n",
       "7             CHI                 1967.0              F                  W50   \n",
       "8             CHI                 1985.0              M                  M23   \n",
       "9             CHI                 1976.0              M                  M40   \n",
       "\n",
       "  Athlete average speed  Athlete ID  \n",
       "0                10.286           0  \n",
       "1                 9.501           1  \n",
       "2                 9.472           2  \n",
       "3                 8.976           3  \n",
       "4                 8.469           4  \n",
       "5                 7.792           5  \n",
       "6                 7.732           6  \n",
       "7                 7.645           7  \n",
       "8                 7.516           8  \n",
       "9                 7.404           9  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce00482d-2951-4a6a-b3cf-9560b36eebbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7117634, 13)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a97848a5-53a2-478b-9a9e-c72a46b10c00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete club                  object\n",
       "Athlete country               object\n",
       "Athlete year of birth        float64\n",
       "Athlete gender                object\n",
       "Athlete age category          object\n",
       "Athlete average speed         object\n",
       "Athlete ID                     int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c79f08ff-e37a-4f50-98fd-aa4150d7ac4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean up data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55dfa9a1-e316-4835-9ecc-e719baf9f412",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Only want USA Races, 50k or 50Mi, 2020"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f22a4cd-bc5d-4702-9bb8-e074880b90e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#step 1 show 50Mi or 50k\n",
    "#50km\n",
    "#50mi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "612be7db-ec1f-4e8a-8861-def6946b1096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>9:53:05 h</td>\n",
       "      <td>*Middleville, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.141</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:09:35 h</td>\n",
       "      <td>*Waterloo, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>7.211</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:33:00 h</td>\n",
       "      <td>*Kitchener, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.967</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:38:17 h</td>\n",
       "      <td>*Utica, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.914</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:56:35 h</td>\n",
       "      <td>*Grass Lake, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.738</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7115712</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.-11.10.2015</td>\n",
       "      <td>Joshua Tree Ultra 50 Mile (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>7</td>\n",
       "      <td>13:16:00 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1950.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>6.065</td>\n",
       "      <td>45981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7115713</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.-11.10.2015</td>\n",
       "      <td>Joshua Tree Ultra 50 Mile (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>7</td>\n",
       "      <td>14:30:00 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>5.549</td>\n",
       "      <td>291222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7115714</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.-11.10.2015</td>\n",
       "      <td>Joshua Tree Ultra 50 Mile (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>7</td>\n",
       "      <td>14:58:00 h</td>\n",
       "      <td>*Carlsbad, CA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>5.376</td>\n",
       "      <td>1505833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7115715</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.-11.10.2015</td>\n",
       "      <td>Joshua Tree Ultra 50 Mile (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>7</td>\n",
       "      <td>15:58:00 h</td>\n",
       "      <td>*Los Angeles, CA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>5.04</td>\n",
       "      <td>594399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7115716</th>\n",
       "      <td>2015</td>\n",
       "      <td>10.-11.10.2015</td>\n",
       "      <td>Joshua Tree Ultra 50 Mile (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>7</td>\n",
       "      <td>15:59:00 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W23</td>\n",
       "      <td>5.034</td>\n",
       "      <td>1516606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>333685 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event     Event dates  \\\n",
       "55                2018      06.01.2018   \n",
       "56                2018      06.01.2018   \n",
       "57                2018      06.01.2018   \n",
       "58                2018      06.01.2018   \n",
       "59                2018      06.01.2018   \n",
       "...                ...             ...   \n",
       "7115712           2015  10.-11.10.2015   \n",
       "7115713           2015  10.-11.10.2015   \n",
       "7115714           2015  10.-11.10.2015   \n",
       "7115715           2015  10.-11.10.2015   \n",
       "7115716           2015  10.-11.10.2015   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "55       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "56       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "57       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "58       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "59       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "...                                                ...                   ...   \n",
       "7115712                Joshua Tree Ultra 50 Mile (USA)                  50mi   \n",
       "7115713                Joshua Tree Ultra 50 Mile (USA)                  50mi   \n",
       "7115714                Joshua Tree Ultra 50 Mile (USA)                  50mi   \n",
       "7115715                Joshua Tree Ultra 50 Mile (USA)                  50mi   \n",
       "7115716                Joshua Tree Ultra 50 Mile (USA)                  50mi   \n",
       "\n",
       "         Event number of finishers Athlete performance      Athlete club  \\\n",
       "55                               9           9:53:05 h  *Middleville, MI   \n",
       "56                               9          11:09:35 h     *Waterloo, ON   \n",
       "57                               9          11:33:00 h    *Kitchener, ON   \n",
       "58                               9          11:38:17 h        *Utica, MI   \n",
       "59                               9          11:56:35 h   *Grass Lake, MI   \n",
       "...                            ...                 ...               ...   \n",
       "7115712                          7          13:16:00 h               NaN   \n",
       "7115713                          7          14:30:00 h               NaN   \n",
       "7115714                          7          14:58:00 h     *Carlsbad, CA   \n",
       "7115715                          7          15:58:00 h  *Los Angeles, CA   \n",
       "7115716                          7          15:59:00 h               NaN   \n",
       "\n",
       "        Athlete country  Athlete year of birth Athlete gender  \\\n",
       "55                  USA                 1983.0              M   \n",
       "56                  CAN                 1977.0              F   \n",
       "57                  CAN                 1976.0              M   \n",
       "58                  USA                 1986.0              M   \n",
       "59                  USA                 1988.0              M   \n",
       "...                 ...                    ...            ...   \n",
       "7115712             USA                 1950.0              F   \n",
       "7115713             USA                 1965.0              F   \n",
       "7115714             USA                 1974.0              M   \n",
       "7115715             USA                 1985.0              M   \n",
       "7115716             USA                 1990.0              F   \n",
       "\n",
       "        Athlete age category Athlete average speed  Athlete ID  \n",
       "55                       M23                 8.141          55  \n",
       "56                       W40                 7.211          56  \n",
       "57                       M40                 6.967          57  \n",
       "58                       M23                 6.914          58  \n",
       "59                       M23                 6.738          59  \n",
       "...                      ...                   ...         ...  \n",
       "7115712                  W60                 6.065       45981  \n",
       "7115713                  W50                 5.549      291222  \n",
       "7115714                  M40                 5.376     1505833  \n",
       "7115715                  M23                  5.04      594399  \n",
       "7115716                  W23                 5.034     1516606  \n",
       "\n",
       "[333685 rows x 13 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event distance/length'] == '50mi']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9849aec6-3c36-460c-bb9b-0df897fda6a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#combine 50k/50mi with isin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "415be70c-58d8-47b4-a5db-a18c5c11e948",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>4:51:39 h</td>\n",
       "      <td>Tnfrc</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1978.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>10.286</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:15:45 h</td>\n",
       "      <td>Roberto Echeverría</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>9.501</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:16:44 h</td>\n",
       "      <td>Puro Trail Osorno</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>9.472</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:34:13 h</td>\n",
       "      <td>Columbia</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>8.976</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:54:14 h</td>\n",
       "      <td>Baguales Trail</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.469</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117228</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:40:15 h</td>\n",
       "      <td>*Pennsboro, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>5.17</td>\n",
       "      <td>143968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117229</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Fenton, MI</td>\n",
       "      <td>NED</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>5.085</td>\n",
       "      <td>105382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117230</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Kimball, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1950.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M60</td>\n",
       "      <td>5.085</td>\n",
       "      <td>168233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117231</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:53:02 h</td>\n",
       "      <td>*Cumberland, MD</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>5.059</td>\n",
       "      <td>78431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117232</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>10:22:10 h</td>\n",
       "      <td>*Morgantown, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>4.822</td>\n",
       "      <td>316320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1837160 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                         Event name  \\\n",
       "0                 2018  06.01.2018                Selva Costera (CHI)   \n",
       "1                 2018  06.01.2018                Selva Costera (CHI)   \n",
       "2                 2018  06.01.2018                Selva Costera (CHI)   \n",
       "3                 2018  06.01.2018                Selva Costera (CHI)   \n",
       "4                 2018  06.01.2018                Selva Costera (CHI)   \n",
       "...                ...         ...                                ...   \n",
       "7117228           2015  09.10.2015  West Virginia Trilogy 50 km (USA)   \n",
       "7117229           2015  09.10.2015  West Virginia Trilogy 50 km (USA)   \n",
       "7117230           2015  09.10.2015  West Virginia Trilogy 50 km (USA)   \n",
       "7117231           2015  09.10.2015  West Virginia Trilogy 50 km (USA)   \n",
       "7117232           2015  09.10.2015  West Virginia Trilogy 50 km (USA)   \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "0                        50km                         22           4:51:39 h   \n",
       "1                        50km                         22           5:15:45 h   \n",
       "2                        50km                         22           5:16:44 h   \n",
       "3                        50km                         22           5:34:13 h   \n",
       "4                        50km                         22           5:54:14 h   \n",
       "...                       ...                        ...                 ...   \n",
       "7117228                  50km                         79           9:40:15 h   \n",
       "7117229                  50km                         79           9:49:58 h   \n",
       "7117230                  50km                         79           9:49:58 h   \n",
       "7117231                  50km                         79           9:53:02 h   \n",
       "7117232                  50km                         79          10:22:10 h   \n",
       "\n",
       "               Athlete club Athlete country  Athlete year of birth  \\\n",
       "0                     Tnfrc             CHI                 1978.0   \n",
       "1        Roberto Echeverría             CHI                 1981.0   \n",
       "2         Puro Trail Osorno             CHI                 1987.0   \n",
       "3                  Columbia             ARG                 1976.0   \n",
       "4            Baguales Trail             CHI                 1992.0   \n",
       "...                     ...             ...                    ...   \n",
       "7117228      *Pennsboro, WV             USA                 1951.0   \n",
       "7117229         *Fenton, MI             NED                 1960.0   \n",
       "7117230        *Kimball, MI             USA                 1950.0   \n",
       "7117231     *Cumberland, MD             USA                 1977.0   \n",
       "7117232     *Morgantown, WV             USA                 1976.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "0                    M                  M35                10.286           0  \n",
       "1                    M                  M35                 9.501           1  \n",
       "2                    M                  M23                 9.472           2  \n",
       "3                    M                  M40                 8.976           3  \n",
       "4                    M                  M23                 8.469           4  \n",
       "...                ...                  ...                   ...         ...  \n",
       "7117228              F                  W60                  5.17      143968  \n",
       "7117229              F                  W50                 5.085      105382  \n",
       "7117230              M                  M60                 5.085      168233  \n",
       "7117231              F                  W35                 5.059       78431  \n",
       "7117232              F                  W35                 4.822      316320  \n",
       "\n",
       "[1837160 rows x 13 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event distance/length'].isin(['50km','50mi'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c3a6a655-601c-4fa3-a1e2-63b7befdda7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2538571</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>7:34:19 h</td>\n",
       "      <td>日本隊</td>\n",
       "      <td>JPN</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M50</td>\n",
       "      <td>10.627</td>\n",
       "      <td>53107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538572</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>7:43:50 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AUS</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M45</td>\n",
       "      <td>10.409</td>\n",
       "      <td>8785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538573</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:04:40 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>9.962</td>\n",
       "      <td>4502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538574</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:30:49 h</td>\n",
       "      <td>台灣大腳ㄚ長跑協會</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>9.452</td>\n",
       "      <td>63964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538575</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:34:47 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1964.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>9.379</td>\n",
       "      <td>4485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762404</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:36:25 h</td>\n",
       "      <td>AKS Polonia Warszawa</td>\n",
       "      <td>POL</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>6.573</td>\n",
       "      <td>860743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762405</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:36:27 h</td>\n",
       "      <td>*Warszawa</td>\n",
       "      <td>POL</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W45</td>\n",
       "      <td>6.572</td>\n",
       "      <td>860744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762406</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:44:18 h</td>\n",
       "      <td>Outdoor Training</td>\n",
       "      <td>POL</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W23</td>\n",
       "      <td>6.461</td>\n",
       "      <td>860745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762407</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>8:04:50 h</td>\n",
       "      <td>PH Bysewo Gdańsk</td>\n",
       "      <td>POL</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.188</td>\n",
       "      <td>798409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762408</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>8:11:43 h</td>\n",
       "      <td>*Nowe Aleksandrowo</td>\n",
       "      <td>POL</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>6.101</td>\n",
       "      <td>860746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63489 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event     Event dates  \\\n",
       "2538571           2020  07.-09.02.2020   \n",
       "2538572           2020  07.-09.02.2020   \n",
       "2538573           2020  07.-09.02.2020   \n",
       "2538574           2020  07.-09.02.2020   \n",
       "2538575           2020  07.-09.02.2020   \n",
       "...                ...             ...   \n",
       "2762404           2020      03.10.2020   \n",
       "2762405           2020      03.10.2020   \n",
       "2762406           2020      03.10.2020   \n",
       "2762407           2020      03.10.2020   \n",
       "2762408           2020      03.10.2020   \n",
       "\n",
       "                                      Event name Event distance/length  \\\n",
       "2538571  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538572  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538573  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538574  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538575  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "...                                          ...                   ...   \n",
       "2762404               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762405               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762406               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762407               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762408               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance          Athlete club  \\\n",
       "2538571                         38           7:34:19 h                   日本隊   \n",
       "2538572                         38           7:43:50 h                   NaN   \n",
       "2538573                         38           8:04:40 h                   NaN   \n",
       "2538574                         38           8:30:49 h             台灣大腳ㄚ長跑協會   \n",
       "2538575                         38           8:34:47 h                   NaN   \n",
       "...                            ...                 ...                   ...   \n",
       "2762404                        271           7:36:25 h  AKS Polonia Warszawa   \n",
       "2762405                        271           7:36:27 h             *Warszawa   \n",
       "2762406                        271           7:44:18 h      Outdoor Training   \n",
       "2762407                        271           8:04:50 h      PH Bysewo Gdańsk   \n",
       "2762408                        271           8:11:43 h    *Nowe Aleksandrowo   \n",
       "\n",
       "        Athlete country  Athlete year of birth Athlete gender  \\\n",
       "2538571             JPN                 1965.0              M   \n",
       "2538572             AUS                 1974.0              M   \n",
       "2538573             TPE                 1976.0              M   \n",
       "2538574             TPE                 1969.0              F   \n",
       "2538575             TPE                 1964.0              M   \n",
       "...                 ...                    ...            ...   \n",
       "2762404             POL                 1981.0              F   \n",
       "2762405             POL                 1970.0              F   \n",
       "2762406             POL                 1993.0              F   \n",
       "2762407             POL                 1976.0              M   \n",
       "2762408             POL                 1961.0              M   \n",
       "\n",
       "        Athlete age category Athlete average speed  Athlete ID  \n",
       "2538571                  M50                10.627       53107  \n",
       "2538572                  M45                10.409        8785  \n",
       "2538573                  M40                 9.962        4502  \n",
       "2538574                  W50                 9.452       63964  \n",
       "2538575                  M55                 9.379        4485  \n",
       "...                      ...                   ...         ...  \n",
       "2762404                  W35                 6.573      860743  \n",
       "2762405                  W45                 6.572      860744  \n",
       "2762406                  W23                 6.461      860745  \n",
       "2762407                  M40                 6.188      798409  \n",
       "2762408                  M55                 6.101      860746  \n",
       "\n",
       "[63489 rows x 13 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['Event distance/length'].isin(['50km','50mi'])) & (df ['Year of event'] == 2020)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7fc9f6b9-5574-46d1-a85c-541303d19cfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51923      USA\n",
       "51924      USA\n",
       "51925      USA\n",
       "51926      USA\n",
       "51927      USA\n",
       "          ... \n",
       "6710397    USA\n",
       "6710398    USA\n",
       "6710399    USA\n",
       "6710400    USA\n",
       "6710401    USA\n",
       "Name: Event name, Length: 338, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event name'] == 'Everglades 50 Mile Ultra Run (USA)']['Event name'].str.split('(').str.get(1).str.split(')').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "17c94ba9-ff86-4f0f-a93f-31ac57e9bac8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>9:53:05 h</td>\n",
       "      <td>*Middleville, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.141</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:09:35 h</td>\n",
       "      <td>*Waterloo, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>7.211</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:33:00 h</td>\n",
       "      <td>*Kitchener, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.967</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:38:17 h</td>\n",
       "      <td>*Utica, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.914</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:56:35 h</td>\n",
       "      <td>*Grass Lake, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.738</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117228</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:40:15 h</td>\n",
       "      <td>*Pennsboro, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>5.17</td>\n",
       "      <td>143968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117229</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Fenton, MI</td>\n",
       "      <td>NED</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>5.085</td>\n",
       "      <td>105382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117230</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Kimball, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1950.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M60</td>\n",
       "      <td>5.085</td>\n",
       "      <td>168233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117231</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:53:02 h</td>\n",
       "      <td>*Cumberland, MD</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>5.059</td>\n",
       "      <td>78431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117232</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>10:22:10 h</td>\n",
       "      <td>*Morgantown, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>4.822</td>\n",
       "      <td>316320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1355619 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "55                2018  06.01.2018   \n",
       "56                2018  06.01.2018   \n",
       "57                2018  06.01.2018   \n",
       "58                2018  06.01.2018   \n",
       "59                2018  06.01.2018   \n",
       "...                ...         ...   \n",
       "7117228           2015  09.10.2015   \n",
       "7117229           2015  09.10.2015   \n",
       "7117230           2015  09.10.2015   \n",
       "7117231           2015  09.10.2015   \n",
       "7117232           2015  09.10.2015   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "55       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "56       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "57       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "58       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "59       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "...                                                ...                   ...   \n",
       "7117228              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117229              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117230              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117231              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117232              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance      Athlete club  \\\n",
       "55                               9           9:53:05 h  *Middleville, MI   \n",
       "56                               9          11:09:35 h     *Waterloo, ON   \n",
       "57                               9          11:33:00 h    *Kitchener, ON   \n",
       "58                               9          11:38:17 h        *Utica, MI   \n",
       "59                               9          11:56:35 h   *Grass Lake, MI   \n",
       "...                            ...                 ...               ...   \n",
       "7117228                         79           9:40:15 h    *Pennsboro, WV   \n",
       "7117229                         79           9:49:58 h       *Fenton, MI   \n",
       "7117230                         79           9:49:58 h      *Kimball, MI   \n",
       "7117231                         79           9:53:02 h   *Cumberland, MD   \n",
       "7117232                         79          10:22:10 h   *Morgantown, WV   \n",
       "\n",
       "        Athlete country  Athlete year of birth Athlete gender  \\\n",
       "55                  USA                 1983.0              M   \n",
       "56                  CAN                 1977.0              F   \n",
       "57                  CAN                 1976.0              M   \n",
       "58                  USA                 1986.0              M   \n",
       "59                  USA                 1988.0              M   \n",
       "...                 ...                    ...            ...   \n",
       "7117228             USA                 1951.0              F   \n",
       "7117229             NED                 1960.0              F   \n",
       "7117230             USA                 1950.0              M   \n",
       "7117231             USA                 1977.0              F   \n",
       "7117232             USA                 1976.0              F   \n",
       "\n",
       "        Athlete age category Athlete average speed  Athlete ID  \n",
       "55                       M23                 8.141          55  \n",
       "56                       W40                 7.211          56  \n",
       "57                       M40                 6.967          57  \n",
       "58                       M23                 6.914          58  \n",
       "59                       M23                 6.738          59  \n",
       "...                      ...                   ...         ...  \n",
       "7117228                  W60                  5.17      143968  \n",
       "7117229                  W50                 5.085      105382  \n",
       "7117230                  M60                 5.085      168233  \n",
       "7117231                  W35                 5.059       78431  \n",
       "7117232                  W35                 4.822      316320  \n",
       "\n",
       "[1355619 rows x 13 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) == 'USA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8f84bf1f-247f-481c-971d-0bb0321086b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>9:53:05 h</td>\n",
       "      <td>*Middleville, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.141</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:09:35 h</td>\n",
       "      <td>*Waterloo, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>7.211</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:33:00 h</td>\n",
       "      <td>*Kitchener, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.967</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:38:17 h</td>\n",
       "      <td>*Utica, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.914</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:56:35 h</td>\n",
       "      <td>*Grass Lake, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.738</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117228</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:40:15 h</td>\n",
       "      <td>*Pennsboro, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>5.17</td>\n",
       "      <td>143968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117229</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Fenton, MI</td>\n",
       "      <td>NED</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>5.085</td>\n",
       "      <td>105382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117230</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:49:58 h</td>\n",
       "      <td>*Kimball, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1950.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M60</td>\n",
       "      <td>5.085</td>\n",
       "      <td>168233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117231</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>9:53:02 h</td>\n",
       "      <td>*Cumberland, MD</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>5.059</td>\n",
       "      <td>78431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117232</th>\n",
       "      <td>2015</td>\n",
       "      <td>09.10.2015</td>\n",
       "      <td>West Virginia Trilogy 50 km (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>79</td>\n",
       "      <td>10:22:10 h</td>\n",
       "      <td>*Morgantown, WV</td>\n",
       "      <td>USA</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>4.822</td>\n",
       "      <td>316320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1355619 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "55                2018  06.01.2018   \n",
       "56                2018  06.01.2018   \n",
       "57                2018  06.01.2018   \n",
       "58                2018  06.01.2018   \n",
       "59                2018  06.01.2018   \n",
       "...                ...         ...   \n",
       "7117228           2015  09.10.2015   \n",
       "7117229           2015  09.10.2015   \n",
       "7117230           2015  09.10.2015   \n",
       "7117231           2015  09.10.2015   \n",
       "7117232           2015  09.10.2015   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "55       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "56       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "57       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "58       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "59       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "...                                                ...                   ...   \n",
       "7117228              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117229              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117230              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117231              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "7117232              West Virginia Trilogy 50 km (USA)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance      Athlete club  \\\n",
       "55                               9           9:53:05 h  *Middleville, MI   \n",
       "56                               9          11:09:35 h     *Waterloo, ON   \n",
       "57                               9          11:33:00 h    *Kitchener, ON   \n",
       "58                               9          11:38:17 h        *Utica, MI   \n",
       "59                               9          11:56:35 h   *Grass Lake, MI   \n",
       "...                            ...                 ...               ...   \n",
       "7117228                         79           9:40:15 h    *Pennsboro, WV   \n",
       "7117229                         79           9:49:58 h       *Fenton, MI   \n",
       "7117230                         79           9:49:58 h      *Kimball, MI   \n",
       "7117231                         79           9:53:02 h   *Cumberland, MD   \n",
       "7117232                         79          10:22:10 h   *Morgantown, WV   \n",
       "\n",
       "        Athlete country  Athlete year of birth Athlete gender  \\\n",
       "55                  USA                 1983.0              M   \n",
       "56                  CAN                 1977.0              F   \n",
       "57                  CAN                 1976.0              M   \n",
       "58                  USA                 1986.0              M   \n",
       "59                  USA                 1988.0              M   \n",
       "...                 ...                    ...            ...   \n",
       "7117228             USA                 1951.0              F   \n",
       "7117229             NED                 1960.0              F   \n",
       "7117230             USA                 1950.0              M   \n",
       "7117231             USA                 1977.0              F   \n",
       "7117232             USA                 1976.0              F   \n",
       "\n",
       "        Athlete age category Athlete average speed  Athlete ID  \n",
       "55                       M23                 8.141          55  \n",
       "56                       W40                 7.211          56  \n",
       "57                       M40                 6.967          57  \n",
       "58                       M23                 6.914          58  \n",
       "59                       M23                 6.738          59  \n",
       "...                      ...                   ...         ...  \n",
       "7117228                  W60                  5.17      143968  \n",
       "7117229                  W50                 5.085      105382  \n",
       "7117230                  M60                 5.085      168233  \n",
       "7117231                  W35                 5.059       78431  \n",
       "7117232                  W35                 4.822      316320  \n",
       "\n",
       "[1355619 rows x 13 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d21839df-1af2-4a59-a4e4-6d6c25c009cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#combine all the filters together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "adb16fc4-6473-4a8b-be8d-85a2eb89c0e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760957</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:07:48 h</td>\n",
       "      <td>*East Lansing, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>7.013</td>\n",
       "      <td>816361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760958</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:22 h</td>\n",
       "      <td>*Traverse City, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>6.706</td>\n",
       "      <td>326469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760959</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:24 h</td>\n",
       "      <td>*Traverse City, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1962.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W55</td>\n",
       "      <td>6.705</td>\n",
       "      <td>372174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760960</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:38:30 h</td>\n",
       "      <td>*Mason, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>6.543</td>\n",
       "      <td>860349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2760961</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:59:53 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>6.252</td>\n",
       "      <td>770097</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>26090 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "2539945           2020  02.02.2020   \n",
       "2539946           2020  02.02.2020   \n",
       "2539947           2020  02.02.2020   \n",
       "2539948           2020  02.02.2020   \n",
       "2539949           2020  02.02.2020   \n",
       "...                ...         ...   \n",
       "2760957           2020  03.10.2020   \n",
       "2760958           2020  03.10.2020   \n",
       "2760959           2020  03.10.2020   \n",
       "2760960           2020  03.10.2020   \n",
       "2760961           2020  03.10.2020   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "2539945  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539946  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539947  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539948  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539949  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "...                                                ...                   ...   \n",
       "2760957   Yankee Springs Fall Trail Run Festival (USA)                  50km   \n",
       "2760958   Yankee Springs Fall Trail Run Festival (USA)                  50km   \n",
       "2760959   Yankee Springs Fall Trail Run Festival (USA)                  50km   \n",
       "2760960   Yankee Springs Fall Trail Run Festival (USA)                  50km   \n",
       "2760961   Yankee Springs Fall Trail Run Festival (USA)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance  \\\n",
       "2539945                         20           3:17:55 h   \n",
       "2539946                         20           4:02:32 h   \n",
       "2539947                         20           4:07:57 h   \n",
       "2539948                         20           4:22:02 h   \n",
       "2539949                         20           4:27:34 h   \n",
       "...                            ...                 ...   \n",
       "2760957                         30           7:07:48 h   \n",
       "2760958                         30           7:27:22 h   \n",
       "2760959                         30           7:27:24 h   \n",
       "2760960                         30           7:38:30 h   \n",
       "2760961                         30           7:59:53 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "...                         ...             ...                    ...   \n",
       "2760957       *East Lansing, MI             USA                 1958.0   \n",
       "2760958      *Traverse City, MI             USA                 1977.0   \n",
       "2760959      *Traverse City, MI             USA                 1962.0   \n",
       "2760960              *Mason, MI             USA                 1981.0   \n",
       "2760961                     NaN             USA                 1980.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2539945              M                  M23                15.158       71287  \n",
       "2539946              M                  M35                12.369      629508  \n",
       "2539947              M                 MU23                12.099       64838  \n",
       "2539948              M                  M35                11.449      704450  \n",
       "2539949              M                  M40                11.212      810281  \n",
       "...                ...                  ...                   ...         ...  \n",
       "2760957              F                  W60                 7.013      816361  \n",
       "2760958              F                  W40                 6.706      326469  \n",
       "2760959              F                  W55                 6.705      372174  \n",
       "2760960              F                  W35                 6.543      860349  \n",
       "2760961              M                  M35                 6.252      770097  \n",
       "\n",
       "[26090 rows x 13 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['Event distance/length'].isin(['50km','50mi'])) & (df ['Year of event'] == 2020) & (df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) == 'USA')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c44a246d-3235-4242-8116-29e20cf329d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df[(df['Event distance/length'].isin(['50km','50mi'])) & (df ['Year of event'] == 2020) & (df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) == 'USA')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8342be77-6aef-4213-8e76-aa118adc1198",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539950</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:42:06 h</td>\n",
       "      <td>*Seattle, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W23</td>\n",
       "      <td>10.635</td>\n",
       "      <td>810282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539951</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:20 h</td>\n",
       "      <td>*Camano Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>10.369</td>\n",
       "      <td>11739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539952</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:50 h</td>\n",
       "      <td>*Clinton, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M45</td>\n",
       "      <td>10.351</td>\n",
       "      <td>80394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539953</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:51:00 h</td>\n",
       "      <td>*Seattle, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>10.309</td>\n",
       "      <td>140909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539954</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:02:35 h</td>\n",
       "      <td>*Sammamish, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>9.915</td>\n",
       "      <td>753889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "2539945           2020  02.02.2020   \n",
       "2539946           2020  02.02.2020   \n",
       "2539947           2020  02.02.2020   \n",
       "2539948           2020  02.02.2020   \n",
       "2539949           2020  02.02.2020   \n",
       "2539950           2020  02.02.2020   \n",
       "2539951           2020  02.02.2020   \n",
       "2539952           2020  02.02.2020   \n",
       "2539953           2020  02.02.2020   \n",
       "2539954           2020  02.02.2020   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "2539945  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539946  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539947  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539948  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539949  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539950  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539951  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539952  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539953  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539954  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance  \\\n",
       "2539945                         20           3:17:55 h   \n",
       "2539946                         20           4:02:32 h   \n",
       "2539947                         20           4:07:57 h   \n",
       "2539948                         20           4:22:02 h   \n",
       "2539949                         20           4:27:34 h   \n",
       "2539950                         20           4:42:06 h   \n",
       "2539951                         20           4:49:20 h   \n",
       "2539952                         20           4:49:50 h   \n",
       "2539953                         20           4:51:00 h   \n",
       "2539954                         20           5:02:35 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "2539950            *Seattle, WA             USA                 1985.0   \n",
       "2539951      *Camano Island, WA             USA                 1961.0   \n",
       "2539952            *Clinton, WA             USA                 1970.0   \n",
       "2539953            *Seattle, WA             USA                 1975.0   \n",
       "2539954          *Sammamish, WA             USA                 1979.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2539945              M                  M23                15.158       71287  \n",
       "2539946              M                  M35                12.369      629508  \n",
       "2539947              M                 MU23                12.099       64838  \n",
       "2539948              M                  M35                11.449      704450  \n",
       "2539949              M                  M40                11.212      810281  \n",
       "2539950              F                  W23                10.635      810282  \n",
       "2539951              M                  M55                10.369       11739  \n",
       "2539952              M                  M45                10.351       80394  \n",
       "2539953              F                  W40                10.309      140909  \n",
       "2539954              M                  M40                 9.915      753889  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5d87a0ea-77ea-44bb-8033-2d4e15a323bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26090, 13)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5ede30d-715a-4643-9d9b-651b602f3bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove (USA) from event name "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "17ac270f-84be-42d9-bf6a-e87245d61918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2539945    West Seattle Beach Run - Winter Edition \n",
       "2539946    West Seattle Beach Run - Winter Edition \n",
       "2539947    West Seattle Beach Run - Winter Edition \n",
       "2539948    West Seattle Beach Run - Winter Edition \n",
       "2539949    West Seattle Beach Run - Winter Edition \n",
       "                             ...                   \n",
       "2760957     Yankee Springs Fall Trail Run Festival \n",
       "2760958     Yankee Springs Fall Trail Run Festival \n",
       "2760959     Yankee Springs Fall Trail Run Festival \n",
       "2760960     Yankee Springs Fall Trail Run Festival \n",
       "2760961     Yankee Springs Fall Trail Run Festival \n",
       "Name: Event name, Length: 26090, dtype: object"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2['Event name'].str.split('(').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f0dd8487-5c55-446f-9050-d269aa138867",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\2772035013.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['Event name'] = df2['Event name'] .str.split('(').str.get(0)\n"
     ]
    }
   ],
   "source": [
    "df2['Event name'] = df2['Event name'] .str.split('(').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "238735b6-07c2-4427-a8d1-ccea56cdd5f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20           3:17:55 h   \n",
       "2539946                  50km                         20           4:02:32 h   \n",
       "2539947                  50km                         20           4:07:57 h   \n",
       "2539948                  50km                         20           4:22:02 h   \n",
       "2539949                  50km                         20           4:27:34 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2539945              M                  M23                15.158       71287  \n",
       "2539946              M                  M35                12.369      629508  \n",
       "2539947              M                 MU23                12.099       64838  \n",
       "2539948              M                  M35                11.449      704450  \n",
       "2539949              M                  M40                11.212      810281  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a3f7f6e-0b8c-4982-b68a-6f9d041dc889",
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean up athlete age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5b0e29a8-15d1-4d88-a5bf-bf126cbd73df",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\3564913802.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['athlete'] = 2020 - df2['Athlete year of birth']\n"
     ]
    }
   ],
   "source": [
    "df2['athlete'] = 2020 - df2['Athlete year of birth']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5e7dafc-c825-4c52-81a6-1b439399cdd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove h from athlete performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "eb12de71-fc28-4922-a523-9c3655aa506a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\2007641030.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['Athlete performance'] = df2['Athlete performance'] .str.split('(').str.get(0)\n"
     ]
    }
   ],
   "source": [
    "df2['Athlete performance'] = df2['Athlete performance'] .str.split('(').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0c3ae7d3-d5ef-42e7-b253-2e73b2fd9f71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20           3:17:55 h   \n",
       "2539946                  50km                         20           4:02:32 h   \n",
       "2539947                  50km                         20           4:07:57 h   \n",
       "2539948                  50km                         20           4:22:02 h   \n",
       "2539949                  50km                         20           4:27:34 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \\\n",
       "2539945              M                  M23                15.158       71287   \n",
       "2539946              M                  M35                12.369      629508   \n",
       "2539947              M                 MU23                12.099       64838   \n",
       "2539948              M                  M35                11.449      704450   \n",
       "2539949              M                  M40                11.212      810281   \n",
       "\n",
       "         athlete  \n",
       "2539945     29.0  \n",
       "2539946     39.0  \n",
       "2539947     21.0  \n",
       "2539948     37.0  \n",
       "2539949     43.0  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06f9c621-51e8-4412-bb67-8112fb8312d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop columns: Athlete Club, Ahtlete Country, Athlete Country, Athlete year of birth, Athlete Age Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2a10ccd0-baad-4750-ae8e-4d4d1f332e2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.drop(['Athlete club', 'Athlete country','Athlete year of birth','Athlete age category'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b094c56e-2e99-48f1-b48a-e1f8a46ee6b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20           3:17:55 h   \n",
       "2539946                  50km                         20           4:02:32 h   \n",
       "2539947                  50km                         20           4:07:57 h   \n",
       "2539948                  50km                         20           4:22:02 h   \n",
       "2539949                  50km                         20           4:27:34 h   \n",
       "\n",
       "        Athlete gender Athlete average speed  Athlete ID  athlete  \n",
       "2539945              M                15.158       71287     29.0  \n",
       "2539946              M                12.369      629508     39.0  \n",
       "2539947              M                12.099       64838     21.0  \n",
       "2539948              M                11.449      704450     37.0  \n",
       "2539949              M                11.212      810281     43.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a58e4fec-3a32-4664-b062-fc05af12a0bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean up null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "9439cc5c-028f-4a15-8936-db55bb6a5138",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  0\n",
       "Event dates                    0\n",
       "Event name                     0\n",
       "Event distance/length          0\n",
       "Event number of finishers      0\n",
       "Athlete performance            0\n",
       "Athlete gender                 0\n",
       "Athlete average speed          0\n",
       "Athlete ID                     0\n",
       "athlete                      233\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "319f39dd-68b7-450e-a057-5b99a04d81ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2547794</th>\n",
       "      <td>2020</td>\n",
       "      <td>25.01.2020</td>\n",
       "      <td>North Carolina Fat Ass 50 Km</td>\n",
       "      <td>50km</td>\n",
       "      <td>57</td>\n",
       "      <td>6:10:30 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.097</td>\n",
       "      <td>811923</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551331</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>4:46:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.469</td>\n",
       "      <td>812656</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551336</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>5:08:36 h</td>\n",
       "      <td>M</td>\n",
       "      <td>9.721</td>\n",
       "      <td>812657</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551344</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>5:54:04 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.473</td>\n",
       "      <td>658221</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551348</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>6:07:11 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.17</td>\n",
       "      <td>812660</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2746543</th>\n",
       "      <td>2020</td>\n",
       "      <td>17.10.2020</td>\n",
       "      <td>Black River Trail Classic 50 Km</td>\n",
       "      <td>50km</td>\n",
       "      <td>8</td>\n",
       "      <td>8:31:26 h</td>\n",
       "      <td>F</td>\n",
       "      <td>5.866</td>\n",
       "      <td>857251</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2749869</th>\n",
       "      <td>2020</td>\n",
       "      <td>17.10.2020</td>\n",
       "      <td>MuleSkinner Endurance 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>27</td>\n",
       "      <td>11:55:05 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.752</td>\n",
       "      <td>857957</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755985</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>9:03:25 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.885</td>\n",
       "      <td>859462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755994</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>10:37:00 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.579</td>\n",
       "      <td>398583</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755997</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>12:30:00 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.437</td>\n",
       "      <td>859465</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>233 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                           Event name  \\\n",
       "2547794           2020  25.01.2020        North Carolina Fat Ass 50 Km    \n",
       "2551331           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551336           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551344           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551348           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "...                ...         ...                                  ...   \n",
       "2746543           2020  17.10.2020     Black River Trail Classic 50 Km    \n",
       "2749869           2020  17.10.2020  MuleSkinner Endurance 50 Mile Race    \n",
       "2755985           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "2755994           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "2755997           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2547794                  50km                         57           6:10:30 h   \n",
       "2551331                  50km                         54           4:46:34 h   \n",
       "2551336                  50km                         54           5:08:36 h   \n",
       "2551344                  50km                         54           5:54:04 h   \n",
       "2551348                  50km                         54           6:07:11 h   \n",
       "...                       ...                        ...                 ...   \n",
       "2746543                  50km                          8           8:31:26 h   \n",
       "2749869                  50mi                         27          11:55:05 h   \n",
       "2755985                  50mi                         23           9:03:25 h   \n",
       "2755994                  50mi                         23          10:37:00 h   \n",
       "2755997                  50mi                         23          12:30:00 h   \n",
       "\n",
       "        Athlete gender Athlete average speed  Athlete ID  athlete  \n",
       "2547794              M                 8.097      811923      NaN  \n",
       "2551331              M                10.469      812656      NaN  \n",
       "2551336              M                 9.721      812657      NaN  \n",
       "2551344              F                 8.473      658221      NaN  \n",
       "2551348              M                  8.17      812660      NaN  \n",
       "...                ...                   ...         ...      ...  \n",
       "2746543              F                 5.866      857251      NaN  \n",
       "2749869              M                 6.752      857957      NaN  \n",
       "2755985              M                 8.885      859462      NaN  \n",
       "2755994              M                 7.579      398583      NaN  \n",
       "2755997              M                 6.437      859465      NaN  \n",
       "\n",
       "[233 rows x 10 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2['athlete'].isna()==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a456297b-2eba-4983-92bd-97f1d0b99001",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "380777a8-3a70-4234-8046-9fade58758f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25857, 10)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d9888e28-673e-4876-9750-fba5ae58afaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#check for dupes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "af517f39-9980-4b7f-b6f5-406871ec3559",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Year of event, Event dates, Event name, Event distance/length, Event number of finishers, Athlete performance, Athlete gender, Athlete average speed, Athlete ID, athlete]\n",
       "Index: []"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2.duplicated() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6d321fd-638e-48fc-893d-e21656cdbb19",
   "metadata": {},
   "outputs": [],
   "source": [
    "#reset index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "80a1ea0a-a858-4fd1-9e8e-d5e0cbae4dc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25852</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:07:48 h</td>\n",
       "      <td>F</td>\n",
       "      <td>7.013</td>\n",
       "      <td>816361</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25853</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:22 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.706</td>\n",
       "      <td>326469</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25854</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:24 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.705</td>\n",
       "      <td>372174</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25855</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:38:30 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.543</td>\n",
       "      <td>860349</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25856</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:59:53 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.252</td>\n",
       "      <td>770097</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25857 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Year of event Event dates                                Event name  \\\n",
       "0               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "1               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "3               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "4               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "...              ...         ...                                       ...   \n",
       "25852           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25853           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25854           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25855           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25856           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "\n",
       "      Event distance/length  Event number of finishers Athlete performance  \\\n",
       "0                      50km                         20           3:17:55 h   \n",
       "1                      50km                         20           4:02:32 h   \n",
       "2                      50km                         20           4:07:57 h   \n",
       "3                      50km                         20           4:22:02 h   \n",
       "4                      50km                         20           4:27:34 h   \n",
       "...                     ...                        ...                 ...   \n",
       "25852                  50km                         30           7:07:48 h   \n",
       "25853                  50km                         30           7:27:22 h   \n",
       "25854                  50km                         30           7:27:24 h   \n",
       "25855                  50km                         30           7:38:30 h   \n",
       "25856                  50km                         30           7:59:53 h   \n",
       "\n",
       "      Athlete gender Athlete average speed  Athlete ID  athlete  \n",
       "0                  M                15.158       71287     29.0  \n",
       "1                  M                12.369      629508     39.0  \n",
       "2                  M                12.099       64838     21.0  \n",
       "3                  M                11.449      704450     37.0  \n",
       "4                  M                11.212      810281     43.0  \n",
       "...              ...                   ...         ...      ...  \n",
       "25852              F                 7.013      816361     62.0  \n",
       "25853              F                 6.706      326469     43.0  \n",
       "25854              F                 6.705      372174     58.0  \n",
       "25855              F                 6.543      860349     39.0  \n",
       "25856              M                 6.252      770097     40.0  \n",
       "\n",
       "[25857 rows x 10 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa79bd06-0db1-48d2-b54b-33427e43d139",
   "metadata": {},
   "outputs": [],
   "source": [
    "#fix types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4669739b-9a3a-4b52-ae0b-36327d7509ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete gender                object\n",
       "Athlete average speed         object\n",
       "Athlete ID                     int64\n",
       "athlete                      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "20bcc6be-ea04-4bb1-ac13-3eb10244c6e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\2684203060.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['athlete'] = df2['athlete'].astype(int)\n"
     ]
    }
   ],
   "source": [
    "df2['athlete'] = df2['athlete'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "b8267db7-06db-4949-99de-7b369dd93441",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\AppData\\Local\\Temp\\ipykernel_3524\\501852820.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['Athlete average speed'] = df2['Athlete average speed'].astype(float)\n"
     ]
    }
   ],
   "source": [
    "df2['Athlete average speed'] = df2['Athlete average speed'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9de566ae-86f6-4b6c-9577-81e1a7d20e75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete gender                object\n",
       "Athlete average speed        float64\n",
       "Athlete ID                     int64\n",
       "athlete                        int32\n",
       "dtype: object"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "aea69670-3a87-4918-9e1b-82645c1f4721",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20           3:17:55 h   \n",
       "2539946                  50km                         20           4:02:32 h   \n",
       "2539947                  50km                         20           4:07:57 h   \n",
       "2539948                  50km                         20           4:22:02 h   \n",
       "2539949                  50km                         20           4:27:34 h   \n",
       "\n",
       "        Athlete gender  Athlete average speed  Athlete ID  athlete  \n",
       "2539945              M                 15.158       71287       29  \n",
       "2539946              M                 12.369      629508       39  \n",
       "2539947              M                 12.099       64838       21  \n",
       "2539948              M                 11.449      704450       37  \n",
       "2539949              M                 11.212      810281       43  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2019613-4b32-484e-80e7-7b2feb92c905",
   "metadata": {},
   "outputs": [],
   "source": [
    "#rename columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e87fe110-0dd1-49fd-a078-63c3e4ceedd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Year of event                  int64\n",
    "#Event dates                   object\n",
    "#Event name                    object\n",
    "#Event distance/length         object\n",
    "#Event number of finishers      int64\n",
    "#Athlete performance           object\n",
    "#Athlete gender                object\n",
    "#Athlete average speed        float64\n",
    "#Athlete ID                     int64\n",
    "#athlete                        int32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "092a7d92-1ca8-47e6-97bb-966b7670bb99",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.rename(columns =  { 'Year of event': 'year',\n",
    "                             'Event dates': 'race_day',\n",
    "                             'Event name':'race_name',\n",
    "                             'Event distance/length': 'race_length',\n",
    "                             'Event number of finishers': 'race_number_of_finishers',\n",
    "                             'Athlete performance': 'athlete_performance',\n",
    "                             'Athlete gender': 'athlete_gender',\n",
    "                             'Athlete average speed': 'athlete_average_speed',\n",
    "                             'Athlete ID': 'athlete_id',\n",
    "                             'athlete': 'athlete_age'\n",
    "                            })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1acf7071-fa1f-445b-9577-7cab09b1af6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>race_day</th>\n",
       "      <th>race_name</th>\n",
       "      <th>race_length</th>\n",
       "      <th>race_number_of_finishers</th>\n",
       "      <th>athlete_performance</th>\n",
       "      <th>athlete_gender</th>\n",
       "      <th>athlete_average_speed</th>\n",
       "      <th>athlete_id</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         year    race_day                                 race_name  \\\n",
       "2539945  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        race_length  race_number_of_finishers athlete_performance  \\\n",
       "2539945        50km                        20           3:17:55 h   \n",
       "2539946        50km                        20           4:02:32 h   \n",
       "2539947        50km                        20           4:07:57 h   \n",
       "2539948        50km                        20           4:22:02 h   \n",
       "2539949        50km                        20           4:27:34 h   \n",
       "\n",
       "        athlete_gender  athlete_average_speed  athlete_id  athlete_age  \n",
       "2539945              M                 15.158       71287           29  \n",
       "2539946              M                 12.369      629508           39  \n",
       "2539947              M                 12.099       64838           21  \n",
       "2539948              M                 11.449      704450           37  \n",
       "2539949              M                 11.212      810281           43  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93c52311-f2dc-4dd2-9a4d-9658b30dafc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#reorder columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f44fcc54-7a9e-41b6-af2a-53ff00e37d8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 =  df2[['race_day', 'race_name', 'race_length', 'race_number_of_finishers', 'athlete_performance', 'athlete_gender', 'athlete_average_speed', 'athlete_id', 'athlete_age']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "c6b8c5d5-72cf-4cfb-b9c0-66c4f5302249",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race_day</th>\n",
       "      <th>race_name</th>\n",
       "      <th>race_length</th>\n",
       "      <th>race_number_of_finishers</th>\n",
       "      <th>athlete_performance</th>\n",
       "      <th>athlete_gender</th>\n",
       "      <th>athlete_average_speed</th>\n",
       "      <th>athlete_id</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race_day                                 race_name race_length  \\\n",
       "2539945  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539946  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539947  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539948  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539949  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "\n",
       "         race_number_of_finishers athlete_performance athlete_gender  \\\n",
       "2539945                        20           3:17:55 h              M   \n",
       "2539946                        20           4:02:32 h              M   \n",
       "2539947                        20           4:07:57 h              M   \n",
       "2539948                        20           4:22:02 h              M   \n",
       "2539949                        20           4:27:34 h              M   \n",
       "\n",
       "         athlete_average_speed  athlete_id  athlete_age  \n",
       "2539945                 15.158       71287           29  \n",
       "2539946                 12.369      629508           39  \n",
       "2539947                 12.099       64838           21  \n",
       "2539948                 11.449      704450           37  \n",
       "2539949                 11.212      810281           43  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "36d4f53e-67fe-4f41-82d2-cf8093638e0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find 2 races that I ran in 2020 - Sarasota / Everglades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "0978dbb2-d471-4eea-a0a0-908a115733fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race_day</th>\n",
       "      <th>race_name</th>\n",
       "      <th>race_length</th>\n",
       "      <th>race_number_of_finishers</th>\n",
       "      <th>athlete_performance</th>\n",
       "      <th>athlete_gender</th>\n",
       "      <th>athlete_average_speed</th>\n",
       "      <th>athlete_id</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2591476</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>8:31:39 h</td>\n",
       "      <td>M</td>\n",
       "      <td>9.436</td>\n",
       "      <td>820757</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591477</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>8:31:48 h</td>\n",
       "      <td>M</td>\n",
       "      <td>9.433</td>\n",
       "      <td>46432</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591478</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>8:34:43 h</td>\n",
       "      <td>M</td>\n",
       "      <td>9.380</td>\n",
       "      <td>813617</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591479</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:07:35 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.817</td>\n",
       "      <td>820758</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591480</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:15:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.691</td>\n",
       "      <td>647115</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591481</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:18:05 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.651</td>\n",
       "      <td>696063</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591482</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:19:10 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.634</td>\n",
       "      <td>222509</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591483</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:20:51 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.608</td>\n",
       "      <td>820759</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591484</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:26:15 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.526</td>\n",
       "      <td>359359</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591485</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:26:16 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.526</td>\n",
       "      <td>103020</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591486</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:26:38 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.521</td>\n",
       "      <td>202097</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591487</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:34:49 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.399</td>\n",
       "      <td>820760</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591488</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:48:47 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.200</td>\n",
       "      <td>820761</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591489</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:48:47 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.200</td>\n",
       "      <td>820762</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591490</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>10:39:32 h</td>\n",
       "      <td>F</td>\n",
       "      <td>7.549</td>\n",
       "      <td>820763</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591491</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>10:39:35 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.549</td>\n",
       "      <td>39534</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591492</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>10:44:13 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.494</td>\n",
       "      <td>190251</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591493</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>10:56:52 h</td>\n",
       "      <td>F</td>\n",
       "      <td>7.350</td>\n",
       "      <td>202096</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591494</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:05:48 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.251</td>\n",
       "      <td>695761</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591495</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:09:54 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.207</td>\n",
       "      <td>696060</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591496</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:13:16 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.171</td>\n",
       "      <td>47609</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591497</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:39:29 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.902</td>\n",
       "      <td>347938</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591498</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:39:30 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.902</td>\n",
       "      <td>55213</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591499</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:42:05 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.877</td>\n",
       "      <td>393456</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591500</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:46:44 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.831</td>\n",
       "      <td>197745</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591501</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>11:53:44 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.764</td>\n",
       "      <td>248521</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591502</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:18:49 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.535</td>\n",
       "      <td>820764</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591503</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:32:10 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.419</td>\n",
       "      <td>733944</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591504</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:37:47 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.371</td>\n",
       "      <td>140763</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591505</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:41:43 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.338</td>\n",
       "      <td>47616</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591506</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:42:21 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.333</td>\n",
       "      <td>820765</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591507</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:48:30 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.282</td>\n",
       "      <td>311648</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591508</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:48:31 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.282</td>\n",
       "      <td>211177</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591509</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>12:53:43 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.240</td>\n",
       "      <td>369928</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591510</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:09:39 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.114</td>\n",
       "      <td>198005</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591511</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:42:48 h</td>\n",
       "      <td>M</td>\n",
       "      <td>5.868</td>\n",
       "      <td>695776</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591512</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:45:22 h</td>\n",
       "      <td>M</td>\n",
       "      <td>5.850</td>\n",
       "      <td>647125</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591513</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:46:59 h</td>\n",
       "      <td>M</td>\n",
       "      <td>5.838</td>\n",
       "      <td>12531</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591514</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:57:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>5.768</td>\n",
       "      <td>19081</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2591515</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>13:57:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>5.768</td>\n",
       "      <td>34961</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race_day                      race_name race_length  \\\n",
       "2591476  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591477  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591478  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591479  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591480  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591481  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591482  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591483  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591484  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591485  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591486  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591487  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591488  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591489  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591490  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591491  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591492  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591493  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591494  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591495  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591496  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591497  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591498  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591499  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591500  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591501  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591502  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591503  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591504  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591505  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591506  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591507  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591508  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591509  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591510  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591511  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591512  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591513  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591514  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2591515  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "\n",
       "         race_number_of_finishers athlete_performance athlete_gender  \\\n",
       "2591476                        40           8:31:39 h              M   \n",
       "2591477                        40           8:31:48 h              M   \n",
       "2591478                        40           8:34:43 h              M   \n",
       "2591479                        40           9:07:35 h              M   \n",
       "2591480                        40           9:15:32 h              M   \n",
       "2591481                        40           9:18:05 h              M   \n",
       "2591482                        40           9:19:10 h              M   \n",
       "2591483                        40           9:20:51 h              M   \n",
       "2591484                        40           9:26:15 h              F   \n",
       "2591485                        40           9:26:16 h              M   \n",
       "2591486                        40           9:26:38 h              F   \n",
       "2591487                        40           9:34:49 h              M   \n",
       "2591488                        40           9:48:47 h              M   \n",
       "2591489                        40           9:48:47 h              M   \n",
       "2591490                        40          10:39:32 h              F   \n",
       "2591491                        40          10:39:35 h              M   \n",
       "2591492                        40          10:44:13 h              M   \n",
       "2591493                        40          10:56:52 h              F   \n",
       "2591494                        40          11:05:48 h              M   \n",
       "2591495                        40          11:09:54 h              M   \n",
       "2591496                        40          11:13:16 h              M   \n",
       "2591497                        40          11:39:29 h              M   \n",
       "2591498                        40          11:39:30 h              M   \n",
       "2591499                        40          11:42:05 h              M   \n",
       "2591500                        40          11:46:44 h              M   \n",
       "2591501                        40          11:53:44 h              M   \n",
       "2591502                        40          12:18:49 h              F   \n",
       "2591503                        40          12:32:10 h              M   \n",
       "2591504                        40          12:37:47 h              M   \n",
       "2591505                        40          12:41:43 h              F   \n",
       "2591506                        40          12:42:21 h              M   \n",
       "2591507                        40          12:48:30 h              M   \n",
       "2591508                        40          12:48:31 h              F   \n",
       "2591509                        40          12:53:43 h              M   \n",
       "2591510                        40          13:09:39 h              M   \n",
       "2591511                        40          13:42:48 h              M   \n",
       "2591512                        40          13:45:22 h              M   \n",
       "2591513                        40          13:46:59 h              M   \n",
       "2591514                        40          13:57:02 h              M   \n",
       "2591515                        40          13:57:02 h              M   \n",
       "\n",
       "         athlete_average_speed  athlete_id  athlete_age  \n",
       "2591476                  9.436      820757           27  \n",
       "2591477                  9.433       46432           39  \n",
       "2591478                  9.380      813617           34  \n",
       "2591479                  8.817      820758           33  \n",
       "2591480                  8.691      647115           30  \n",
       "2591481                  8.651      696063           26  \n",
       "2591482                  8.634      222509           23  \n",
       "2591483                  8.608      820759           36  \n",
       "2591484                  8.526      359359           26  \n",
       "2591485                  8.526      103020           42  \n",
       "2591486                  8.521      202097           46  \n",
       "2591487                  8.399      820760           28  \n",
       "2591488                  8.200      820761           38  \n",
       "2591489                  8.200      820762           40  \n",
       "2591490                  7.549      820763           35  \n",
       "2591491                  7.549       39534           47  \n",
       "2591492                  7.494      190251           44  \n",
       "2591493                  7.350      202096           58  \n",
       "2591494                  7.251      695761           33  \n",
       "2591495                  7.207      696060           30  \n",
       "2591496                  7.171       47609           40  \n",
       "2591497                  6.902      347938           49  \n",
       "2591498                  6.902       55213           51  \n",
       "2591499                  6.877      393456           57  \n",
       "2591500                  6.831      197745           43  \n",
       "2591501                  6.764      248521           46  \n",
       "2591502                  6.535      820764           45  \n",
       "2591503                  6.419      733944           27  \n",
       "2591504                  6.371      140763           68  \n",
       "2591505                  6.338       47616           52  \n",
       "2591506                  6.333      820765           41  \n",
       "2591507                  6.282      311648           54  \n",
       "2591508                  6.282      211177           38  \n",
       "2591509                  6.240      369928           58  \n",
       "2591510                  6.114      198005           55  \n",
       "2591511                  5.868      695776           51  \n",
       "2591512                  5.850      647125           56  \n",
       "2591513                  5.838       12531           42  \n",
       "2591514                  5.768       19081           52  \n",
       "2591515                  5.768       34961           49  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[df3['race_name'] == 'Everglades 50 Mile Ultra Run ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f4473ef-cc58-4c8b-bbb8-6a13e124f531",
   "metadata": {},
   "outputs": [],
   "source": [
    "#222509"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "9700aabd-0ac7-43ac-a9cb-875d8f91054f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race_day</th>\n",
       "      <th>race_name</th>\n",
       "      <th>race_length</th>\n",
       "      <th>race_number_of_finishers</th>\n",
       "      <th>athlete_performance</th>\n",
       "      <th>athlete_gender</th>\n",
       "      <th>athlete_average_speed</th>\n",
       "      <th>athlete_id</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2591482</th>\n",
       "      <td>14.03.2020</td>\n",
       "      <td>Everglades 50 Mile Ultra Run</td>\n",
       "      <td>50mi</td>\n",
       "      <td>40</td>\n",
       "      <td>9:19:10 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.634</td>\n",
       "      <td>222509</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2616900</th>\n",
       "      <td>22.02.2020</td>\n",
       "      <td>Manasota Track Club 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>36</td>\n",
       "      <td>4:49:16 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.371</td>\n",
       "      <td>222509</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race_day                      race_name race_length  \\\n",
       "2591482  14.03.2020  Everglades 50 Mile Ultra Run         50mi   \n",
       "2616900  22.02.2020       Manasota Track Club 50K         50km   \n",
       "\n",
       "         race_number_of_finishers athlete_performance athlete_gender  \\\n",
       "2591482                        40           9:19:10 h              M   \n",
       "2616900                        36           4:49:16 h              M   \n",
       "\n",
       "         athlete_average_speed  athlete_id  athlete_age  \n",
       "2591482                  8.634      222509           23  \n",
       "2616900                 10.371      222509           23  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[df3['athlete_id'] == 222509]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc96a1b0-0f2a-444b-8dcd-c2d0967befba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#charts and graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "e388b6c3-35b6-4636-951c-922d5a599f62",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race_length', ylabel='Count'>"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df3['race_length'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "8e6aaeda-e737-455c-8057-cf63fccd7a50",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race_length', ylabel='Count'>"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df3, x = 'race_length', hue = 'athlete_gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "e51d7bc3-c256-4263-adef-51ec4cb485e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\cesar\\anaconda3\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x145c2545fd0>"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(df3[df3['race_length'] == '50mi']['athlete_average_speed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "3c6345af-17e8-4063-9def-5e7c6ed7aad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race_length', ylabel='athlete_average_speed'>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.violinplot(data = df3, x = 'race_length', y = 'athlete_average_speed', hue = 'athlete_gender', split  = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "c01ed042-5107-4be2-bef2-79148b52d8bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x145dc15a810>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 616.611x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data = df3, x = 'athlete_age', y = 'athlete_average_speed', hue = 'athlete_gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c43f3f7-c8e3-4820-8f95-12d5e788e77f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#questions I want to find from the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22069414-3ffb-4a9a-8101-40d4e54deca2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#race_day\n",
    "#race_name\n",
    "#race_length\n",
    "#race_number_of_finishers\n",
    "#athlete_performance\n",
    "#athlete_gender\n",
    "#athlete_average_speed\n",
    "#athlete_id\n",
    "#athlete_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ca36797-9912-4cb4-a009-e37eb129be5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#difference in speed for the 50k, 50mi male to female"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "192bc4cd-ffd5-460f-8ca3-6eca1cdbf14e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "race_length  athlete_gender\n",
       "50km         F                 7.083011\n",
       "             M                 7.738985\n",
       "50mi         F                 6.834371\n",
       "             M                 7.257633\n",
       "Name: athlete_average_speed, dtype: float64"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.groupby(['race_length', 'athlete_gender'])['athlete_average_speed'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5c4dfe1-d9c4-4bc4-b332-a60703894507",
   "metadata": {},
   "outputs": [],
   "source": [
    "#what age groups are the best in the 50m Race (20 + races min)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "6f77dea1-1216-465d-b3db-fba714387b50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>athlete_age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>7.902252</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>7.779800</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>7.575252</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>7.569204</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>7.540923</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>7.451638</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>7.430022</td>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>7.422359</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7.403854</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>7.379800</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>7.379188</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>7.367902</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.354274</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>7.327656</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>7.319011</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>7.310669</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>7.304658</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>7.293778</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>7.287969</td>\n",
       "      <td>162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>7.283648</td>\n",
       "      <td>227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>7.220493</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>7.201748</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>7.197017</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>7.130667</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>7.085410</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>7.052642</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>7.019379</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>6.897236</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>6.884225</td>\n",
       "      <td>187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>6.847400</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>6.828623</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>6.805506</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>6.789553</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>6.783205</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>6.736969</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>6.708373</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>6.696853</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>6.672072</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>6.671541</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>6.620727</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>6.582328</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>6.514806</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>6.358355</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>6.272730</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>6.261788</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean  count\n",
       "athlete_age                 \n",
       "29           7.902252    135\n",
       "23           7.779800     55\n",
       "28           7.575252    107\n",
       "30           7.569204    157\n",
       "25           7.540923     91\n",
       "31           7.451638    138\n",
       "38           7.430022    231\n",
       "35           7.422359    195\n",
       "36           7.403854    185\n",
       "26           7.379800     75\n",
       "33           7.379188    149\n",
       "22           7.367902     41\n",
       "24           7.354274     73\n",
       "42           7.327656    209\n",
       "34           7.319011    182\n",
       "40           7.310669    236\n",
       "21           7.304658     38\n",
       "20           7.293778     27\n",
       "32           7.287969    162\n",
       "39           7.283648    227\n",
       "37           7.220493    221\n",
       "27           7.201748    119\n",
       "41           7.197017    179\n",
       "45           7.130667    156\n",
       "47           7.085410    156\n",
       "44           7.052642    179\n",
       "51           7.019379    124\n",
       "46           6.897236    174\n",
       "43           6.884225    187\n",
       "52           6.847400    130\n",
       "55           6.828623     69\n",
       "54           6.805506     83\n",
       "49           6.789553    159\n",
       "57           6.783205     78\n",
       "53           6.736969     96\n",
       "56           6.708373     67\n",
       "48           6.696853    136\n",
       "59           6.672072     83\n",
       "50           6.671541    172\n",
       "64           6.620727     22\n",
       "58           6.582328     67\n",
       "63           6.514806     31\n",
       "61           6.358355     31\n",
       "62           6.272730     37\n",
       "60           6.261788     33"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.query('race_length == \"50mi\"').groupby('athlete_age')['athlete_average_speed'].agg(['mean', 'count']).sort_values('mean', ascending=False).query('count > 19')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe7a99b6-4f64-4279-827f-f30564be6a36",
   "metadata": {},
   "outputs": [],
   "source": [
    "#what age groups are the worst in the 50m Race (20 + races min)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "4aee8e41-7155-44c3-b168-799a3d306a9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>athlete_age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>6.261788</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>6.272730</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>6.358355</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>6.514806</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>6.582328</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>6.620727</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>6.671541</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>6.672072</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>6.696853</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>6.708373</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>6.736969</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>6.783205</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>6.789553</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>6.805506</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>6.828623</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>6.847400</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>6.884225</td>\n",
       "      <td>187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>6.897236</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>7.019379</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>7.052642</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>7.085410</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>7.130667</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>7.197017</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>7.201748</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>7.220493</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>7.283648</td>\n",
       "      <td>227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>7.287969</td>\n",
       "      <td>162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>7.293778</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>7.304658</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>7.310669</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>7.319011</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>7.327656</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.354274</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>7.367902</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>7.379188</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>7.379800</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7.403854</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>7.422359</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>7.430022</td>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>7.451638</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>7.540923</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>7.569204</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>7.575252</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>7.779800</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>7.902252</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean  count\n",
       "athlete_age                 \n",
       "60           6.261788     33\n",
       "62           6.272730     37\n",
       "61           6.358355     31\n",
       "63           6.514806     31\n",
       "58           6.582328     67\n",
       "64           6.620727     22\n",
       "50           6.671541    172\n",
       "59           6.672072     83\n",
       "48           6.696853    136\n",
       "56           6.708373     67\n",
       "53           6.736969     96\n",
       "57           6.783205     78\n",
       "49           6.789553    159\n",
       "54           6.805506     83\n",
       "55           6.828623     69\n",
       "52           6.847400    130\n",
       "43           6.884225    187\n",
       "46           6.897236    174\n",
       "51           7.019379    124\n",
       "44           7.052642    179\n",
       "47           7.085410    156\n",
       "45           7.130667    156\n",
       "41           7.197017    179\n",
       "27           7.201748    119\n",
       "37           7.220493    221\n",
       "39           7.283648    227\n",
       "32           7.287969    162\n",
       "20           7.293778     27\n",
       "21           7.304658     38\n",
       "40           7.310669    236\n",
       "34           7.319011    182\n",
       "42           7.327656    209\n",
       "24           7.354274     73\n",
       "22           7.367902     41\n",
       "33           7.379188    149\n",
       "26           7.379800     75\n",
       "36           7.403854    185\n",
       "35           7.422359    195\n",
       "38           7.430022    231\n",
       "31           7.451638    138\n",
       "25           7.540923     91\n",
       "30           7.569204    157\n",
       "28           7.575252    107\n",
       "23           7.779800     55\n",
       "29           7.902252    135"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.query('race_length == \"50mi\"').groupby('athlete_age')['athlete_average_speed'].agg(['mean', 'count']).sort_values('mean', ascending=True).query('count > 19')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47efc1ff-d015-4c66-9b97-b954d9d7b23e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Seasons for the data -> Slower in summer than winter?\n",
    "\n",
    "#spring 3-5\n",
    "#summer 6-8\n",
    "#fall 9-11\n",
    "#winter 12-2\n",
    "\n",
    "#split between two decimals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "52631529-da7f-4cf0-a303-83190541ca88",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3['race_month'] = df3['race_day'].str.split('.').str.get(1).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "fd90c226-1c4d-4b90-a5c5-89df8d5e9db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3['race_season'] = df3['race_month'].apply(lambda x: 'Winter' if x > 11 else 'Fall' if x > 8 else 'Summer' if x > 5 else 'Spring' if x > 2 else 'Winter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a03e4fb9-af78-4bc3-8e6a-8633fcaac198",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race_day</th>\n",
       "      <th>race_name</th>\n",
       "      <th>race_length</th>\n",
       "      <th>race_number_of_finishers</th>\n",
       "      <th>athlete_performance</th>\n",
       "      <th>athlete_gender</th>\n",
       "      <th>athlete_average_speed</th>\n",
       "      <th>athlete_id</th>\n",
       "      <th>athlete_age</th>\n",
       "      <th>race_month</th>\n",
       "      <th>race_season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539950</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:42:06 h</td>\n",
       "      <td>F</td>\n",
       "      <td>10.635</td>\n",
       "      <td>810282</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539951</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:20 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.369</td>\n",
       "      <td>11739</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539952</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:50 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.351</td>\n",
       "      <td>80394</td>\n",
       "      <td>50</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539953</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:51:00 h</td>\n",
       "      <td>F</td>\n",
       "      <td>10.309</td>\n",
       "      <td>140909</td>\n",
       "      <td>45</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539954</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:02:35 h</td>\n",
       "      <td>M</td>\n",
       "      <td>9.915</td>\n",
       "      <td>753889</td>\n",
       "      <td>41</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539955</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:14:30 h</td>\n",
       "      <td>F</td>\n",
       "      <td>9.539</td>\n",
       "      <td>810283</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539956</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:26:11 h</td>\n",
       "      <td>F</td>\n",
       "      <td>9.197</td>\n",
       "      <td>810284</td>\n",
       "      <td>55</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539957</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:49:33 h</td>\n",
       "      <td>M</td>\n",
       "      <td>8.582</td>\n",
       "      <td>40726</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539958</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>6:00:02 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.333</td>\n",
       "      <td>708195</td>\n",
       "      <td>45</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539959</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>6:06:23 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.188</td>\n",
       "      <td>73327</td>\n",
       "      <td>52</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539960</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>6:06:38 h</td>\n",
       "      <td>F</td>\n",
       "      <td>8.183</td>\n",
       "      <td>48473</td>\n",
       "      <td>58</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539961</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>6:24:00 h</td>\n",
       "      <td>M</td>\n",
       "      <td>7.813</td>\n",
       "      <td>150288</td>\n",
       "      <td>46</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539962</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>7:54:33 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.322</td>\n",
       "      <td>53463</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539963</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>8:03:32 h</td>\n",
       "      <td>F</td>\n",
       "      <td>6.204</td>\n",
       "      <td>11777</td>\n",
       "      <td>61</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539964</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>8:03:38 h</td>\n",
       "      <td>M</td>\n",
       "      <td>6.203</td>\n",
       "      <td>11780</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2541271</th>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>White Rock Classic 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>63</td>\n",
       "      <td>4:25:09 h</td>\n",
       "      <td>M</td>\n",
       "      <td>11.314</td>\n",
       "      <td>364678</td>\n",
       "      <td>54</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2541272</th>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>White Rock Classic 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>63</td>\n",
       "      <td>4:35:24 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.893</td>\n",
       "      <td>347890</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2541273</th>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>White Rock Classic 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>63</td>\n",
       "      <td>4:47:32 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.434</td>\n",
       "      <td>48096</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2541274</th>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>White Rock Classic 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>63</td>\n",
       "      <td>4:49:48 h</td>\n",
       "      <td>F</td>\n",
       "      <td>10.352</td>\n",
       "      <td>54241</td>\n",
       "      <td>47</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2541275</th>\n",
       "      <td>01.02.2020</td>\n",
       "      <td>White Rock Classic 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>63</td>\n",
       "      <td>4:53:00 h</td>\n",
       "      <td>M</td>\n",
       "      <td>10.239</td>\n",
       "      <td>67094</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race_day                                 race_name race_length  \\\n",
       "2539945  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539946  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539947  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539948  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539949  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539950  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539951  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539952  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539953  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539954  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539955  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539956  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539957  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539958  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539959  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539960  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539961  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539962  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539963  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539964  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2541271  01.02.2020                   White Rock Classic 50K         50km   \n",
       "2541272  01.02.2020                   White Rock Classic 50K         50km   \n",
       "2541273  01.02.2020                   White Rock Classic 50K         50km   \n",
       "2541274  01.02.2020                   White Rock Classic 50K         50km   \n",
       "2541275  01.02.2020                   White Rock Classic 50K         50km   \n",
       "\n",
       "         race_number_of_finishers athlete_performance athlete_gender  \\\n",
       "2539945                        20           3:17:55 h              M   \n",
       "2539946                        20           4:02:32 h              M   \n",
       "2539947                        20           4:07:57 h              M   \n",
       "2539948                        20           4:22:02 h              M   \n",
       "2539949                        20           4:27:34 h              M   \n",
       "2539950                        20           4:42:06 h              F   \n",
       "2539951                        20           4:49:20 h              M   \n",
       "2539952                        20           4:49:50 h              M   \n",
       "2539953                        20           4:51:00 h              F   \n",
       "2539954                        20           5:02:35 h              M   \n",
       "2539955                        20           5:14:30 h              F   \n",
       "2539956                        20           5:26:11 h              F   \n",
       "2539957                        20           5:49:33 h              M   \n",
       "2539958                        20           6:00:02 h              F   \n",
       "2539959                        20           6:06:23 h              F   \n",
       "2539960                        20           6:06:38 h              F   \n",
       "2539961                        20           6:24:00 h              M   \n",
       "2539962                        20           7:54:33 h              M   \n",
       "2539963                        20           8:03:32 h              F   \n",
       "2539964                        20           8:03:38 h              M   \n",
       "2541271                        63           4:25:09 h              M   \n",
       "2541272                        63           4:35:24 h              M   \n",
       "2541273                        63           4:47:32 h              M   \n",
       "2541274                        63           4:49:48 h              F   \n",
       "2541275                        63           4:53:00 h              M   \n",
       "\n",
       "         athlete_average_speed  athlete_id  athlete_age  race_month  \\\n",
       "2539945                 15.158       71287           29           2   \n",
       "2539946                 12.369      629508           39           2   \n",
       "2539947                 12.099       64838           21           2   \n",
       "2539948                 11.449      704450           37           2   \n",
       "2539949                 11.212      810281           43           2   \n",
       "2539950                 10.635      810282           35           2   \n",
       "2539951                 10.369       11739           59           2   \n",
       "2539952                 10.351       80394           50           2   \n",
       "2539953                 10.309      140909           45           2   \n",
       "2539954                  9.915      753889           41           2   \n",
       "2539955                  9.539      810283           23           2   \n",
       "2539956                  9.197      810284           55           2   \n",
       "2539957                  8.582       40726           25           2   \n",
       "2539958                  8.333      708195           45           2   \n",
       "2539959                  8.188       73327           52           2   \n",
       "2539960                  8.183       48473           58           2   \n",
       "2539961                  7.813      150288           46           2   \n",
       "2539962                  6.322       53463           44           2   \n",
       "2539963                  6.204       11777           61           2   \n",
       "2539964                  6.203       11780           60           2   \n",
       "2541271                 11.314      364678           54           2   \n",
       "2541272                 10.893      347890           44           2   \n",
       "2541273                 10.434       48096           27           2   \n",
       "2541274                 10.352       54241           47           2   \n",
       "2541275                 10.239       67094           35           2   \n",
       "\n",
       "        race_season  \n",
       "2539945      Winter  \n",
       "2539946      Winter  \n",
       "2539947      Winter  \n",
       "2539948      Winter  \n",
       "2539949      Winter  \n",
       "2539950      Winter  \n",
       "2539951      Winter  \n",
       "2539952      Winter  \n",
       "2539953      Winter  \n",
       "2539954      Winter  \n",
       "2539955      Winter  \n",
       "2539956      Winter  \n",
       "2539957      Winter  \n",
       "2539958      Winter  \n",
       "2539959      Winter  \n",
       "2539960      Winter  \n",
       "2539961      Winter  \n",
       "2539962      Winter  \n",
       "2539963      Winter  \n",
       "2539964      Winter  \n",
       "2541271      Winter  \n",
       "2541272      Winter  \n",
       "2541273      Winter  \n",
       "2541274      Winter  \n",
       "2541275      Winter  "
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "19683c40-5038-4d56-9d75-36cf0b7b2cb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>race_season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Spring</th>\n",
       "      <td>7.684430</td>\n",
       "      <td>3294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Winter</th>\n",
       "      <td>7.518187</td>\n",
       "      <td>11595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fall</th>\n",
       "      <td>7.406619</td>\n",
       "      <td>8315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Summer</th>\n",
       "      <td>6.869336</td>\n",
       "      <td>2653</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean  count\n",
       "race_season                 \n",
       "Spring       7.684430   3294\n",
       "Winter       7.518187  11595\n",
       "Fall         7.406619   8315\n",
       "Summer       6.869336   2653"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.groupby('race_season')['athlete_average_speed'].agg(['mean', 'count']).sort_values('mean', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e5af49c-6cc9-45a0-8632-3f22b9073b39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 50 miler only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "9c558e67-90f4-4121-b2c1-d3088d446cb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>race_season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Fall</th>\n",
       "      <td>7.511585</td>\n",
       "      <td>1997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spring</th>\n",
       "      <td>7.082557</td>\n",
       "      <td>836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Winter</th>\n",
       "      <td>7.048442</td>\n",
       "      <td>1977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Summer</th>\n",
       "      <td>6.505776</td>\n",
       "      <td>817</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean  count\n",
       "race_season                 \n",
       "Fall         7.511585   1997\n",
       "Spring       7.082557    836\n",
       "Winter       7.048442   1977\n",
       "Summer       6.505776    817"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.query('race_length == \"50mi\"').groupby('race_season')['athlete_average_speed'].agg(['mean', 'count']).sort_values('mean', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eedce26d-256b-45ff-adaa-51ee05702ab4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa6d5a97-2f06-4ac9-8d27-c4fdbd99dcbe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34324f85-0ec5-4d1f-bea2-6c3b143bf74b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65246b71-2269-45e0-acca-d10e21050ffd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c20c4467-0486-485c-aee3-93920f9383ee",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ceeeff55-de4d-4357-a0d3-34a582636ac8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cda2f7cc-fd20-4996-8d78-47ba5c178f86",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd6e74d3-7b10-456c-8630-c956cdd50259",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c05dae-b9e1-47d1-948e-dc4ce48d2f3e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c3cd756-1ab5-4e83-8d0d-87bf2246f3ca",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
